---
import Nav from "../../components/Nav.astro";
import Layout from "../../layouts/Layout.astro";
import Card from "../../components/Card.astro";
import { Icon } from "astro-icon";

export interface TechStack {
  name: string;
  icon: string;
}

const techStack: TechStack[] = [
  { name: "Typescript", icon: "vscode-icons:file-type-typescript-official" },
  { name: "React", icon: "logos:react" },
  { name: "GQL Request", icon: "vscode-icons:file-type-graphql" },
  { name: "NextJS", icon: "simple-icons:nextdotjs" },
  { name: "TailwindCSS", icon: "logos:tailwindcss-icon" },
  { name: "HeadlessUI", icon: "headless" },
  { name: "ChartJS", icon: "file-icons:chartjs" },
  { name: "Vercel", icon: "tabler:brand-vercel" },
];
---

<Layout title="projects">
  <div class="flex w-full max-w-6xl flex-col justify-start overflow-auto p-6">
    <p class="flex w-full justify-center p-4 text-4xl font-bold">Deck Hub</p>

    <div class="flex w-full flex-row items-center justify-center gap-4">
      <div class="flex">
        <a
          href=""
          target="_blank"
          rel="noopener noreferrer"
          class="relative inline-flex items-center justify-center rounded-br-lg border border-transparent text-sm font-medium text-gray-700 hover:text-gray-500">
          <Icon name="mdi:github" class="w-6 h-6" />
          <span class="ml-2">Code</span>
        </a>
      </div>
      <div class="flex">
        <a
          href=""
          target="_blank"
          rel="noopener noreferrer"
          class="relative inline-flex items-center justify-center rounded-br-lg border border-transparent text-sm font-medium text-gray-700 hover:text-gray-500">
          <Icon name="iconoir:www" class="w-6 h-6" />
          <span class="ml-2">Live</span>
        </a>
      </div>
    </div>
    <div class="flex w-full justify-center p-4">
      <img src="/deckHub.png" class="flex h-full w-3/4 shadow-lg shadow-slate-800" />
    </div>
    <div class="w-5xl flex flex-col gap-8">
      <div class="flex w-full flex-col items-center p-4">
        <p class="mb-4 text-2xl font-bold">Backstory</p>
        <div class="flex w-full items-center gap-4">
          <div class="w-2/3">
            <p>
              <a
                href="https://parallel.life/"
                target="_blank"
                rel="noopener noreferrer"
                class="underline">Parallel</a
              > TCG is a a digital card game similar to those that came before is such as Magic the Gathering,
              or Hearthstone. In order to play the game you need to build a deck consisting of 40 pre
              selected cards. There are some other deck builders out there but none of them had the visual
              aspect that I was looking for, so I decided to build it myself!
            </p>
          </div>
          <div class="w-1/2">
            <img src="/parallel.png" class="shadow-md shadow-slate-600" />
          </div>
        </div>
      </div>
      <div class="flex w-full flex-col items-center">
        <p class="mb-4 w-full text-center text-2xl font-bold">Tech + Key Insights</p>
        <div class="flex w-full items-center gap-4">
          <ul class="flex w-1/3 flex-wrap gap-2 rounded-xl p-4 shadow-lg">
            {
              techStack.map((tech) => (
                <li class="flex w-40 items-center gap-2 p-2">
                  {tech.name === "AuthJS" ? (
                    <img src="/authJS.png" class="h-10 w-10" />
                  ) : (
                    <Icon name={tech.icon} class="h-10 w-10" />
                  )}
                  <p>{tech.name}</p>
                </li>
              ))
            }
          </ul>
          <div class="w-2/3">
            <ul class="text-md flex flex-col gap-4">
              <li>
                <span class="font-bold">GQL Request:</span> To source my data I used the <a
                  href="https://docs.defined.fi/protocols/parallel/filterNftParallelAssets#parallel-asset-game-data"
                  target="_blank"
                  rel="noopener noreferrer">Defined</a
                > Parallel API. It is written in GraphQL. <a
                  href="https://github.com/jasonkuhrt/graphql-request">GQL Request</a
                > is a lightweight GraphQL client that was perfect for fetching data from the API.
              </li>
              <li>
                <span class="font-bold">ChartJS:</span> The React version of this library was great for
                creating the responsive charts I needed to display deck data.
              </li>
            </ul>
          </div>
        </div>
        <div class="flex w-full flex-col items-center">
          <p class="mb-4 text-2xl font-bold">Challenges</p>
          <p>
            Managing the state of the card selection was rather difficult for this project. There
            are close to 50 unique filter options provided. Ensuring the proper cards were displayed
            correctly in real time upon adding or removing a filter was not easy. React's
            useEffect() hook was a crictial part of my implimentation. I learned so much about state
            management in React fom this project.
          </p>
          <br />
        </div>
      </div>
    </div>
  </div>
</Layout>
