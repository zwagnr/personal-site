---
import Nav from "../../components/Nav.astro";
import Layout from "../../layouts/Layout.astro";
import Card from "../../components/Card.astro";
import { Icon } from "astro-icon";

export interface TechStack {
  name: string;
  icon: string;
}

const techStack: TechStack[] = [
  { name: "Typescript", icon: "vscode-icons:file-type-typescript-official" },
  { name: "React", icon: "logos:react" },
  { name: "NextJS", icon: "simple-icons:nextdotjs" },
  { name: "AuthJS", icon: "nextAuth" },
  { name: "TailwindCSS", icon: "logos:tailwindcss-icon" },
  { name: "HeadlessUI", icon: "headless" },
  { name: "SWR", icon: "logos:swr" },
  { name: "Vercel", icon: "tabler:brand-vercel" },
];
---

<Layout title="projects">
  <div class="flex w-full max-w-6xl flex-col justify-start overflow-auto p-6">
    <p class="flex w-full justify-center p-4 text-4xl font-bold">Vital View</p>

    <div class="flex w-full flex-row items-center justify-center gap-4">
      <div class="flex">
        <a
          href="https://github.com/zwagnr/vital-view"
          target="_blank"
          rel="noopener noreferrer"
          class="relative inline-flex items-center justify-center rounded-br-lg border border-transparent text-sm font-medium text-gray-700 hover:text-gray-500">
          <Icon name="mdi:github" class="w-6 h-6" />
          <span class="ml-2">Code</span>
        </a>
      </div>
      <div class="flex">
        <a
          href="https://vitalview.app/"
          target="_blank"
          rel="noopener noreferrer"
          class="relative inline-flex items-center justify-center rounded-br-lg border border-transparent text-sm font-medium text-gray-700 hover:text-gray-500">
          <Icon name="iconoir:www" class="w-6 h-6" />
          <span class="ml-2">Live</span>
        </a>
      </div>
    </div>
    <div class="flex w-full justify-center p-4">
      <img src="/vvPreview.png" class="flex h-full w-3/4 shadow-lg shadow-slate-800" />
    </div>
    <div class="w-5xl flex flex-col gap-8">
      <div class="flex w-full flex-col items-center p-4">
        <p class="mb-4 text-2xl font-bold">Backstory</p>
        <div class="flex w-full items-center gap-4">
          <div class="w-2/3">
            <p>
              After feeling overwhelmed with digital screens dominating my daily life, I decided to
              switch from my Apple Watch to an Oura Ring to track my activity and sleep data.
            </p>
            <br />
            <p>
              Although Oura provided a web dashboard to view my metrics, I found it lacking in
              certain elements. As I have always preferred web dashboards, I decided to create Vital
              View to enhance the visualization and usability of the data provided by the Oura Ring.
            </p>
          </div>
          <div class="w-1/2">
            <img src="/vvOverviewLight.png" class="shadow-md shadow-slate-600" />
          </div>
        </div>
      </div>
      <div class="flex w-full flex-col items-center">
        <p class="mb-4 w-full text-center text-2xl font-bold">Tech + Key Insights</p>
        <div class="flex w-full items-center gap-4">
          <ul class="flex w-1/3 flex-wrap gap-2 rounded-xl p-4 shadow-lg">
            {
              techStack.map((tech) => (
                <li class="flex w-40 items-center gap-2 p-2">
                  {tech.name === "AuthJS" ? (
                    <img src="/authJS.png" class="h-10 w-10" />
                  ) : (
                    <Icon name={tech.icon} class="h-10 w-10" />
                  )}
                  <p>{tech.name}</p>
                </li>
              ))
            }
          </ul>
          <div class="w-2/3">
            <ul class="text-md flex flex-col gap-4">
              <li>
                <span class="font-bold">AuthJS:</span> Oura provies an OAuth2 Authentication flow to
                allow developers a way to provide users access to their data. AuthJS allowed for a straightforward
                and secure way to handle this flow.
              </li>
              <li>
                <span class="font-bold">NextJS:</span> Next's api routes allowed making API calls to
                Oura via the backend a smooth process.
              </li>
              <li>
                <span class="font-bold">SWR:</span> This lightweight library made getting data from the
                backend seemless. It consists of React Hooks for data fetching.
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div class="flex w-full flex-col items-center">
        <p class="mb-4 text-2xl font-bold">Challenges</p>
        <p>
          One of the hardest parts of this project was managing all the data from the Oura API. The
          first hurdle was getting the calculations correct. First the correct timeframe had to be
          set, then the correct format (i.e. seconds to hours), and finally the math. A small
          libraray called DayJS helped a lot to quickly get the correct timeframes and organize
          things like what data belongs in what month for the yearly charts.
        </p>
        <br />
        <p>
          The other thing that was a bit tricky was the percent changes between periods. I initially
          was setting the timeframe for data display (1D, Last 7 Days, etc) from the user chosen
          option, then displaying that data from there. When trying to impliement the percent
          changes, I quickly realized I had an issue. I had to abstract the period logic into two
          parts. Current period, and prior period. This allowed me to have two seperate datasets
          with the ability to make comparisons between them.
        </p>
      </div>
    </div>
  </div>
</Layout>
