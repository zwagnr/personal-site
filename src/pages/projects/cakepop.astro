---
import { Image } from "@astrojs/image/components";

import Layout from "../../layouts/Layout.astro";
import { Icon } from "astro-icon";
import { clsx } from "clsx";

export interface TechStack {
  name: string;
  icon: string;
  styles: string;
}

const techStack: TechStack[] = [
  { name: "Typescript", icon: "typescript", styles: "p-2" },
  { name: "React", icon: "logos:react", styles: "p-2" },
  {
    name: "Vanilla Extract",
    icon: "vscode-icons:file-type-vanilla-extract",
    styles: "p-2",
  },
  { name: "RadixUI", icon: "radix", styles: "p-2" },
  {
    name: "Storybook",
    icon: "vscode-icons:file-type-storybook",
    styles: "p-2",
  },
  { name: "TurboRepo", icon: "turbo", styles: "p-2" },
  { name: "Vite", icon: "vscode-icons:file-type-vite", styles: "p-2" },
  { name: "NPM", icon: "logos:npm-icon", styles: "p-3" },
];
---

<Layout title="projects">
  <div
    class="mb-12 mt-0 flex w-full max-w-7xl flex-col justify-start gap-0 overflow-auto p-8 text-black dark:text-white lg:mt-16 xl:p-0">
    <section class="overflow-hidden">
      <div class="container mx-auto">
        <div class="-mx-4 flex flex-wrap items-center justify-between">
          <div class="w-full px-4">
            <div class="lg:mt-0">
              <h2 class="text-dark mb-8 text-6xl font-bold">Cakepop UI</h2>
              <p class="mb-8 w-full text-lg lg:w-3/4">
                A design system and component library built on top of Vanilla Extract, with a little
                help from React Aria and Radix UI primatives.
              </p>
              <div class="flex gap-8">
                <div class="flex">
                  <a
                    href="https://github.com/zwagnr/cakepop"
                    target="_blank"
                    rel="noopener noreferrer"
                    class="relative inline-flex items-center justify-center rounded-br-lg border border-transparent text-sm font-medium text-neutral-700 hover:text-gray-500 dark:text-neutral-400">
                    <Icon name="mdi:github" class="w-6 h-6" />
                    <span class="ml-1 text-lg font-bold">Code</span>
                  </a>
                </div>
                <div class="flex">
                  <a
                    href="https://cakepop-docs.vercel.app/"
                    target="_blank"
                    rel="noopener noreferrer"
                    class="relative inline-flex items-center justify-center rounded-br-lg border border-transparent text-sm font-medium text-neutral-700 hover:text-gray-500 dark:text-neutral-400">
                    <Icon name="iconoir:www" class="w-6 h-6" />
                    <span class="ml-1 text-lg font-bold">Live</span>
                  </a>
                </div>
              </div>
            </div>
          </div>
          <div class="w-full lg:w-4/6">
            <div class="-mx-3 flex items-center sm:-mx-4">
              <div class="flex w-full items-center justify-center p-4"></div>
            </div>
          </div>
        </div>
      </div>
    </section>
    <div class="mb-16 p-2">
      <Image
        src="/images/cakepopDocs.png"
        alt="Cakepop Docs"
        format="webp"
        height={1867}
        width={3840}
        aspectRatio="16:9"
        fit="fill"
        format="webp"
        class="rounded-lg shadow-xl dark:border dark:border-neutral-600"
      />
    </div>
    <ul
      class="mx-auto mb-12 flex flex-wrap items-center justify-center gap-8 rounded-xl border p-4 shadow-lg dark:border-neutral-600">
      {
        techStack.map((tech) => (
          <li class="flex items-center gap-2 p-2">
            <div
              title={tech.name}
              class={clsx(
                tech.styles,
                "flex h-16 w-16 items-center justify-center rounded-2xl bg-slate-200 shadow-lg dark:bg-slate-700"
              )}>
              <Icon name={tech.icon} class="h-16 w-16" />
            </div>
          </li>
        ))
      }
    </ul>
    <div class="mt-8 flex max-w-5xl flex-col">
      <div class="flex w-full flex-col items-center gap-16">
        <div class="flex w-full flex-col gap-8 lg:w-3/4">
          <p class="text-3xl font-bold">A sweat treat</p>
          <div class="flex w-full justify-center">
            <div class="flex w-full flex-col items-start gap-8 text-lg md:w-full">
              <div class="flex w-full flex-col gap-8 lg:w-3/4">
                <p>
                  While researching CSS solutions to build on top of, I stumbled upon <span
                    ><a
                      class="underline"
                      href="https://vanilla-extract.style/"
                      target="_blank"
                      rel="noopener noreferrer">Vanilla Extract.</a
                    ></span
                  > VE allows for Zero-runtime Stylesheets in TypeScript. I know, CSS in TS ðŸ¤¯!? After
                  trying it out, it turned out to be an incredible DX. It was also PERFECT for building
                  a design system/component library. Through the <span
                    ><a
                      class="underline"
                      href="https://vanilla-extract.style/documentation/packages/recipes/"
                      target="_blank"
                      rel="noopener noreferrer">Recipies</a
                    > & <a
                      class="underline"
                      href="https://vanilla-extract.style/documentation/packages/sprinkles/#sprinkles"
                      target="_blank"
                      rel="noopener noreferrer">Sprinkles</a
                    > API's,</span
                  > I was able to incorperate multi-variant styles as well as include zero-runtime atomic
                  CSS.
                </p>
              </div>
              <Image
                src="/images/ve.png"
                alt="Vanilla Extract Homepage"
                format="webp"
                height={1867}
                width={3840}
                aspectRatio="16:9"
                fit="fill"
                format="webp"
                class="rounded-lg shadow-xl dark:border dark:border-neutral-600"
              />
            </div>
          </div>
        </div>
        <div class="flex w-full flex-col gap-8 lg:w-3/4">
          <div class="flex w-full flex-col items-center"></div>
        </div>
        <div class="flex w-full flex-col gap-8 lg:w-3/4">
          <p class="text-3xl font-bold">So you think you can build a dropdown?</p>
          <div class="flex w-full justify-center">
            <div class="flex w-full flex-row items-start gap-8 text-lg md:w-full">
              <div class="flex w-full flex-col gap-8 lg:w-3/4">
                <p>
                  When I began building this app I had the grand idea of building each component
                  entirly from scratch. This sounded like a great idea at the time. Except it
                  wasn't.
                </p>
                <p>
                  I came across this <span
                    ><a
                      class="underline"
                      href="https://www.youtube.com/watch?v=pcMYcjtWwVI"
                      target="_blank"
                      rel="noopener noreferrer">video</a
                    ></span
                  > by Pedro Duarte about the complexity of accessible components. He mentions his team
                  spending over 2000+ hours perfecting a dropdown.
                </p>
                <p>
                  While building fully accessible components is necessary, it is HARD. RadixUI and
                  React Aria provided unstyled primatives and React Hooks to handle
                  accessibility/behavior functionality.
                </p>
              </div>
            </div>
          </div>
        </div>
        <div class="flex w-full flex-col gap-8 lg:w-3/4">
          <p class="text-3xl font-bold">Run it back Turbo</p>
          <div class="flex w-full justify-center">
            <div class="flex w-full flex-col items-start gap-8 text-lg md:w-full">
              <Image
                src="/images/graphic.png"
                alt="Three Cubes"
                format="webp"
                height={900}
                width={1600}
                aspectRatio="16:9"
                fit="fill"
                format="webp"
              />
              <div class="flex w-full flex-col gap-8 lg:w-3/4">
                <p>
                  This project consited of serveral individual parts to make up the whole. The React
                  NPM library, the docs NextJS app, and the storybook. Instead of splitting each
                  component into its own repo, TurboRepo provided the pefect solution to keep all
                  items in the same repository.
                </p>
              </div>
            </div>
          </div>
        </div>
        <div class="flex w-full flex-col gap-8 lg:w-3/4">
          <p class="text-3xl font-bold">Think <span class="text-sm">smaller</span></p>
          <div class="flex w-full justify-center">
            <div class="flex w-full flex-row items-start gap-8 text-lg md:w-full">
              <div class="flex w-full flex-col gap-8 lg:w-3/4">
                <p>
                  Vanilla extract has an API called Sprinkles. This allows for creating your own
                  zero-runtime atomic CSS(think Tailwind). While building this my utility classes I
                  encounterd 2 big problems.
                  <ul>
                    <li>1) My CSS bundle size became too large.</li>
                    <li>2) The Sprinkles API only supported predefined variables.</li>
                  </ul>
                  <p>
                    I found a solution in a small library from the Wayfair engineering team called <a
                      class="underline"
                      href="https://github.com/wayfair/rainbow-sprinkles"
                      target="_blank"
                      rel="noopener noreferrer">Rainbow Sprinkles.</a
                    >
                    Rainbow sprinkles ships a fraction of the CSS. You still get the TypeScript editor
                    suggestions, but the ability to use any valid CSS value for that property.
                  </p>
                </p>
              </div>
            </div>
          </div>
        </div>
        <div class="flex w-full flex-col gap-8 lg:w-3/4">
          <p class="text-3xl font-bold">Component Polymorphism</p>
          <div class="flex w-full justify-center">
            <div class="flex w-full flex-row items-start gap-8 text-lg md:w-full">
              <div class="flex w-full flex-col gap-8 lg:w-3/4">
                <p>
                  Another thing that gave me some trouble with this project was handling some of the
                  polymorphic components in TypeScript. Allowing the button component, for example,
                  to be a link, button, div, etc., and having the generic types correct was
                  admittedly difficult. However, the experience proved to be incredibly rewarding
                  and greatly strengthened my TypeScript knowledge.
                </p>
              </div>
            </div>
          </div>
        </div>
        <br />
      </div>
    </div>
  </div>
</Layout>
